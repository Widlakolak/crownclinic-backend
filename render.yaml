services:
  # === 1. Usługa Backendu ===
  - type: web
    name: crownclinic-backend
    env: docker
    dockerfilePath: ./Dockerfile
    plan: free
    healthCheckPath: /actuator/health
    envVars:
      # Odwołujemy się do ISTNIEJĄCEJ bazy danych
      # Używamy `connectionString`, która jest poprawną właściwością
      - key: DATABASE_URL
        fromDatabase:
          name: crownclinic-db
          property: connectionString

      # Mówimy Springowi, żeby użył profilu produkcyjnego
      - key: SPRING_PROFILES_ACTIVE
        value: prod

      # Twoje sekrety (ustawisz je w panelu Render)
      - key: GOOGLE_CLIENT_ID
        sync: false
      - key: GOOGLE_CLIENT_SECRET
        sync: false
      - key: JWT_SECRET
        sync: false
      - key: MAIL_USERNAME
        sync: false
      - key: MAIL_PASSWORD
        sync: false
      - key: FRONTEND_URL # Ta zmienna zostanie wypełniona dynamicznie przez Render
        fromService:
          type: web
          name: crownclinic-frontend
          property: url

  # === 2. Usługa Frontendu ===
  - type: web
    name: crownclinic-frontend
    env: docker
    repo: https://github.com/Widlakolak/crownclinic-frontend.git
    dockerfilePath: ./Dockerfile
    plan: free
    envVars:
      - key: BACKEND_URL
        fromService:
          type: web
          name: crownclinic-backend
          property: url
      # PORT jest ustawiany automatycznie przez Render, ale ta zmienna nie szkodzi
      - key: PORT
        value: 8081
      # Włączamy tryb produkcyjny Vaadin
      - key: vaadin.productionMode
        value: true